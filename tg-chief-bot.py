import telebot
from telebot import types
import json
import requests
import pandas as pd
from io import StringIO
import random

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram
token = "7181840277:AAFHRotoGDgGKx-TEpbpM7naed6ETlGWAAY"
bot = telebot.TeleBot(token, threaded=False)
# URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
url = "https://storage.yandexcloud.net/img-tg-bot/tg-bot-chief/rec_1000.csv"


# –ó–∞–≥—Ä—É–∂–∞–µ—Ç CSV —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ DataFrame.
# –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª–∏—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
def load_csv_data(url):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        csv_content = response.content.decode('utf-8')
        data = pd.read_csv(StringIO(csv_content))
        return data
    except requests.RequestException as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {error}")
        return None
    except pd.errors.ParserError as parse_error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ CSV: {parse_error}")
        return None


data = load_csv_data(url)
if data is None:
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


# –ò—â–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
def search_recipes(ing_new):
    ing_new = set(ingredient.strip().lower() for ingredient in ing_new.split(','))
    recipes_found = []
    for index, row in data.iterrows():
        recipe_ingredients = set(x.strip().lower() for x in row['ing_new'].strip("[]").replace("'", "").split(','))
        match_count = len(ing_new & recipe_ingredients)
        if match_count > 0:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤
            recipes_found.append(
                (row['name'], row['ingredients'], row['recipe'], row['photo'], row['energy'], match_count))
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    recipes_found.sort(key=lambda x: x[5], reverse=True)
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    max_matches = recipes_found[0][5] if recipes_found else 0
    # –û—Ç–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    top_recipes = [recipe for recipe in recipes_found if recipe[5] == max_matches]
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø-—Ä–µ—Ü–µ–ø—Ç–æ–≤
    random.shuffle(top_recipes)
    top_recipes = [(name, ingredients, recipe, photo, energy) for name, ingredients, recipe, photo, energy, _ in
                   top_recipes]
    return top_recipes


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–µ–ª—É –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞
def search_by_nutrient(nutrient, max_value):
    """
    –ò—â–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_value.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤, –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
    """
    recipes_found = data[data[nutrient] <= max_value]
    recipes_list = list(
        recipes_found[['name', 'ingredients', 'recipe', 'photo', 'energy']].itertuples(index=False, name=None))
    random.shuffle(recipes_list)
    return recipes_list


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –≤–µ–±—Ö—É–∫–∏ –æ—Ç Telegram –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç—É.
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP-–æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏.
def handler(event, context):
    try:
        body = json.loads(event['body'])
        update = telebot.types.Update.de_json(body)
        bot.process_new_updates([update])
        return {
            "statusCode": 200,
            "headers": {
                "Content-Type": "application/json"
            },
            "body": json.dumps({"message": "Update processed"})
        }
    except Exception as e:
        return {
            "statusCode": 500,
            "headers": {
                "Content-Type": "application/json"
            },
            "body": json.dumps({"error": str(e)})
        }


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton('ü•¶–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', callback_data='ing')
    btn2 = types.InlineKeyboardButton('üçè–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å', callback_data='energy')
    btn3 = types.InlineKeyboardButton('‚ÅâÔ∏è–ü–æ–º–æ—â—å', callback_data='help')
    btn4 = types.InlineKeyboardButton('ü§çInfo', callback_data='info')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Ç—ã –º—É—á–∞–µ—à—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º –±–ª—é–¥–∞, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è. –ò –æ–±–µ—â–∞—é, —á—Ç–æ —Ç—ã —Å–æ–π–¥–µ—à—å —Å —É–º–∞ –æ—Ç –º–æ–∏—Ö –∏–¥–µ–π ü§™\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                     reply_markup=markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    bot.answer_callback_query(call.id)
    if call.data == 'ing':
        msg = bot.send_message(call.message.chat.id,
                               '–ü—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏ —Å–≤–æ–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∞ —è —Å–∫–∏–Ω—É —Ç–µ–±–µ –∫—Ä—É—Ç—É—é –∏ –≤–∫—É—Å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—Éü´∂')
        bot.register_next_step_handler(msg, handle_ingredients)
    elif call.data == 'help':
        bot.send_message(call.message.chat.id,
                         "–Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, —Å–ø–∞—Å—É —Ç–µ–±—è –æ—Ç –º—É–∫ –≤—ã–±–æ—Ä–∞ —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç ¬´–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã¬ª –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É —Ç–µ–±—è –µ—Å—Ç—å.")
    elif call.data == 'info':
        bot.send_message(call.message.chat.id,
                         "–ù–∞–ø–∏—à–∏ /start, –∏ –º—ã –Ω–∞—á–Ω–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å!\n–û—Ç–ø—Ä–∞–≤—å —Å–µ—Ä–¥–µ—á–∫–æ ü´∂üèª –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª—è–º @Chupchip90 @anyaalekkseeva")
    elif call.data == 'energy':
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_calories = types.InlineKeyboardButton('‚õπüèª‚Äç‚ôÄÔ∏è–ö–∞–ª–æ—Ä–∏–∏', callback_data='calories')
        btn_proteins = types.InlineKeyboardButton('ü•©–ë–µ–ª–∫–∏', callback_data='proteins')
        btn_fats = types.InlineKeyboardButton('ü•ò–ñ–∏—Ä—ã', callback_data='fats')
        btn_carbs = types.InlineKeyboardButton('üçï–£–≥–ª–µ–≤–æ–¥—ã', callback_data='carbs')
        markup.add(btn_calories, btn_proteins, btn_fats, btn_carbs)
        bot.send_message(call.message.chat.id, "–í—ã–±–∏—Ä–∞–π, –ø–æ –∫–∞–∫–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –æ—Ç–±–∏—Ä–∞—Ç—å —Ç–≤–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ãüëáüèª",
                         reply_markup=markup)
    elif call.data == 'calories':
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–µ–ª –∫–∞–ª–æ—Ä–∏–π:')
        bot.register_next_step_handler(msg, handle_calories)
    elif call.data == 'proteins':
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–µ–ª –±–µ–ª–∫–æ–≤:')
        bot.register_next_step_handler(msg, handle_proteins)
    elif call.data == 'fats':
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–µ–ª –∂–∏—Ä–æ–≤:')
        bot.register_next_step_handler(msg, handle_fats)
    elif call.data == 'carbs':
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–µ–ª —É–≥–ª–µ–≤–æ–¥–æ–≤:')
        bot.register_next_step_handler(msg, handle_carbs)


user_data = {}


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã.
def handle_ingredients(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'ing_new': message.text,
        'recipes': search_recipes(message.text),
        'current_index': 0
    }
    send_recipes(chat_id)


def handle_calories(message):
    try:
        max_calories = int(message.text)
        chat_id = message.chat.id
        recipes = search_by_nutrient('Calories', max_calories)
        user_data[chat_id] = {
            'recipes': recipes,
            'current_index': 0
        }
        send_recipes(chat_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–µ–ª –∫–∞–ª–æ—Ä–∏–π:')
        bot.register_next_step_handler(msg, handle_calories)


def handle_proteins(message):
    try:
        max_proteins = int(message.text)
        chat_id = message.chat.id
        recipes = search_by_nutrient('Proteins', max_proteins)
        user_data[chat_id] = {
            'recipes': recipes,
            'current_index': 0
        }
        send_recipes(chat_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–µ–ª –±–µ–ª–∫–æ–≤:')
        bot.register_next_step_handler(msg, handle_proteins)


def handle_fats(message):
    try:
        max_fats = int(message.text)
        chat_id = message.chat.id
        recipes = search_by_nutrient('Fats', max_fats)
        user_data[chat_id] = {
            'recipes': recipes,
            'current_index': 0
        }
        send_recipes(chat_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–µ–ª –∂–∏—Ä–æ–≤:')
        bot.register_next_step_handler(msg, handle_fats)


def handle_carbs(message):
    try:
        max_carbs = int(message.text)
        chat_id = message.chat.id
        recipes = search_by_nutrient('Carbohydrates', max_carbs)
        user_data[chat_id] = {
            'recipes': recipes,
            'current_index': 0
        }
        send_recipes(chat_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–µ–ª —É–≥–ª–µ–≤–æ–¥–æ–≤:')
        bot.register_next_step_handler(msg, handle_carbs)


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∑–∞ —Ä–∞–∑
def send_recipes(chat_id):
    recipes = user_data[chat_id]['recipes']
    if not recipes:
        msg = bot.send_message(chat_id, "–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è üòî –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.")
        bot.register_next_step_handler(msg, handle_ingredients)
        return

    index = user_data[chat_id]['current_index']
    # return

    response = "–†–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è:\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?üòã–ü–∏—à–∏ —Ü–∏—Ñ—Ä—Éüëáüèª\n"
    for i in range(index, min(index + 5, len(recipes))):
        response += f"{i + 1}. {recipes[i][0]}\n"

    markup = types.InlineKeyboardMarkup()
    if index + 5 < len(recipes):
        markup.add(types.InlineKeyboardButton('–ü–∏—à–∏ —Ü–∏—Ñ—Ä—É üëáüèª', callback_data='more'))
    if index > 0:
        markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))

    msg = bot.send_message(chat_id, response, )
    bot.register_next_step_handler(msg, handle_recipe_selection)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ—Ü–µ–ø—Ç–µ –∏ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
def handle_recipe_selection(message):
    try:
        recipe_index = int(message.text) - 1
        chat_id = message.chat.id
        recipes = user_data[chat_id]['recipes']
        if 0 <= recipe_index < len(recipes):
            selected_recipe = recipes[recipe_index]
            bot.send_message(chat_id,
                             f"–†–µ—Ü–µ–ø—Ç üßëüèª‚Äçüç≥ {selected_recipe[0]}:\n\nü•Ç–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{selected_recipe[1]}\n\nüçè–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å\n{selected_recipe[4]}\n\nü•Ñ–†–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:\n{selected_recipe[2]} üçΩ")
            bot.send_photo(chat_id, selected_recipe[3])
        else:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "—ç–π, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É, –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–µ–Ω—éüòë")
        send_recipes(message.chat.id)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å–ø–∏—Å–∫—É —Ä–µ—Ü–µ–ø—Ç–æ–≤.
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤.
@bot.callback_query_handler(func=lambda call: call.data in ['more', 'back'])
def handle_pagination(call):
    chat_id = call.message.chat.id
    if call.data == 'more':
        user_data[chat_id]['current_index'] += 5
    elif call.data == 'back':
        user_data[chat_id]['current_index'] -= 5
    send_recipes(chat_id)
